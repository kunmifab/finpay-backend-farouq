// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(uuid()) @db.Char(36)
  email               String   @unique @db.VarChar(191)
  password            String   @db.VarChar(191)
  name                String?  @db.VarChar(191)
  phoneNumber         String?   @db.VarChar(30)
  accountType         String?  @default("Freelancer") @db.VarChar(191)
  countryCode         String?  @db.VarChar(191)
  state               String?  @db.VarChar(191)
  address             String?  @db.VarChar(191)
  country             String?  @db.VarChar(191)
  verify_email_code   Int?  
  verify_email        Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  stripeConnectId     String?  @unique
  flutterwaveCustomerId   String?  @unique
  mapleradCustomerId   String?  @unique
  mapleradTier        String? 
  
  balances                  Balance[]
  accounts                  Account[]
  invoices                  Invoice[]
  cards                     Card[]
  transactions              Transaction[]
  transfer_beneficiaries    TransferBeneficiary[]
  notifications             Notification[]
}

model Balance {
  id        String @id @default(cuid())
  amount    Float  @default(0.00) @db.Float
  currency  String @db.VarChar(10) // E.g., "USD", "EUR", "NGN"
  userId    String
  user      User   @relation(fields: [userId], references: [id])

  // This ensures a user can only have one balance per currency
  @@unique([userId, currency])
}

model ExchangeRate {
  id          String   @id @default(uuid()) @db.Char(36)
  base        String   @unique @db.Char(3)
  gbp         Decimal? @db.Decimal(20,10)
  eur         Decimal? @db.Decimal(20,10)
  ngn         Decimal? @db.Decimal(20,10)
  cad         Decimal? @db.Decimal(20,10)
  effectiveAt DateTime
  provider    String?  @db.VarChar(50)
  createdAt   DateTime @default(now())
}

model Account {
  id                String @id @default(cuid())
  accountHolder     String?  @db.VarChar(191)
  bankName          String?  @db.VarChar(191)
  accountNumber     String?  @db.VarChar(191)
  routingNumber     String?  @db.VarChar(191)
  accountType       String?  @db.VarChar(20)
  address           String?  @db.VarChar(191)
  currency          String @db.VarChar(10) // E.g., "USD", "EUR", "NGN"
  userId            String
  user              User   @relation(fields: [userId], references: [id])

  provider          String  @db.VarChar(50)   // e.g., "stripe"
  providerRef       String?  @db.VarChar(191)  // e.g., fa_..., ba_..., financial address id
  status            String?  @db.VarChar(50)   // "active"|"pending"|"failed"
  meta              Json?
  // This ensures a user can only have one account per currency
  @@unique([userId, currency, provider])
}

model Invoice {
  id          String @id @default(cuid())
  currency    String @db.VarChar(10) // E.g., "USD", "EUR", "NGN"
  sharableUrl String? @db.VarChar(191)
  issueDate   DateTime
  dueDate     DateTime
  status      String? @db.VarChar(191)
  userId      String
  user        User @relation(fields: [userId], references: [id])
  items       InvoiceItem[]
  customer    InvoiceCustomer[]
}

model InvoiceItem {
  id          String @id @default(cuid())
  description String @db.VarChar(191)
  quantity    Int
  amount      Float @db.Float
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
}

model InvoiceCustomer {
  id        String @id @default(cuid())
  name      String @db.VarChar(191)
  email     String @db.VarChar(191)
  state     String?  @db.VarChar(191)
  address   String?  @db.VarChar(191)
  country   String?  @db.VarChar(191)
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
}

model Card {
  id              String @id @default(cuid())
  holder_name     String @db.VarChar(191)
  cardNumber      String? @db.VarChar(191)
  maskedPan       String? @db.VarChar(191)
  expiry          String? @db.VarChar(191)
  cvv             String? @db.VarChar(191)
  status          String? @db.VarChar(191)
  type            String? @db.VarChar(191)
  brand           String? @db.VarChar(191)
  firstSix        String? @db.VarChar(191)
  lastFour        String? @db.VarChar(191)
  expiry_month    String? @db.VarChar(191)
  expiry_year     String? @db.VarChar(191)
  currency        String? @db.VarChar(191)
  balance         Float? @db.Float
  balanceUpdatedAt DateTime?
  autoApprove     Boolean?
  address         Address? @relation(fields: [addressId], references: [id])
  addressId       String?
  reference       String? @unique
  card_reference  String?
  createdAt       DateTime 
  updatedAt       DateTime @default(now())

  userId          String
  user            User   @relation(fields: [userId], references: [id])
}

model Address {
  id        String @id @default(cuid())
  street     String? @db.VarChar(191)
  city      String? @db.VarChar(191)
  state     String? @db.VarChar(191)
  country   String? @db.VarChar(191)
  postalCode String? @db.VarChar(191)
  card                      Card[]
  transfer_beneficiaries    TransferBeneficiary[]
}

model Transaction {
  id            String  @id @default(cuid())
  currency      String? @db.VarChar(12)
  status        String  @db.VarChar(81)
  amount        Float   @default(0.00) @db.Float
  recipientName String? @db.VarChar(191)
  description   String? @db.VarChar(191)
  reference     String? @db.VarChar(191)
  meta          Json?
  type          String? @db.VarChar(81)
  createdAt     DateTime
  updatedAt     DateTime @default(now())

  userId        String
  user          User      @relation(fields: [userId], references: [id])
}

model TransferBeneficiary {
  id              String @id @default(cuid())
  accountHolder   String @db.VarChar(191)
  accountNumber   String? @db.VarChar(191)
  bankName        String? @db.VarChar(191)
  currency        String? @db.VarChar(50)
  address         Address? @relation(fields: [addressId], references: [id])
  addressId       String?
  createdAt       DateTime 
  updatedAt       DateTime @default(now())

  userId          String
  user            User   @relation(fields: [userId], references: [id])

  @@unique([userId, accountHolder, accountNumber, bankName])
}

model Notification {
  id            String @id @default(cuid())
  title         String  @db.VarChar(191)
  message       String  @db.VarChar(191)
  isRead        Boolean @default(false)
  link          String? @db.VarChar(191)

  userId        String
  user          User   @relation(fields: [userId], references: [id])
}